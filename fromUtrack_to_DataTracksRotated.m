function fromUtrack_to_DataTracksRotated(xmlfile, folder_tag)

% This function enables to get the dataTracks structure of a given
% condition (given xmlfile) containing several embryos(cells), that will be
% needed for the statistical DiLiPop analysis.

% It will load tracksFinal generated by utrack algo previously. Then, it
% will extract informations needed : duration of the tracks, position,
% image of start, image of end and saved it in DataTracks structure. 

% Importantly, the tracking has to be done on embryo well oriented along AP
% axis, with posterior side at theright

% INPUT ARGS:
% 1st: the xmlfile: mat structure containing the general_param and param
% asscociated to the studied condition
% 2nd: folder_tag: leave it empty, if you did not add a tag to saving folder
% "treatment at the cortex"

% OUTPUT:
% The functions will generate and save the mat file dataTracks_rotated as
% mat file.

global general_param
global param
global pathMainDirectory;


%% download xmlfile and load param and general_param

if nargin < 1
    [xmlfile, p] = uigetfile('*.mat','Please choose a job file to process');
    [~,xmlfile_bkp,~] = fileparts(xmlfile);
    xmlfile = fullfile(p, xmlfile);
end

if nargin < 2
    folder_tag = input_perso(['Set the tag used to get proper treatment at the cortex folder: '],'');
end

load(xmlfile); % load structure containing general_param and param
general_param = saveVarsMat_new.general_param;% read general_param from structure

%% for each embryo

for k = 1:length(saveVarsMat_new.params) % all embryo
    
    param = saveVarsMat_new.params{k};
    
    if param.status >= 0
                
        disp(param.sp1)
        
        %% Download tracks file generated by utrack
        
        path_tiff_stack = strcat(param.basepath , '/' , param.sp1 , '/');
        mainDirectory = strcat('treatment at the cortex', folder_tag);
        mkdir(path_tiff_stack,mainDirectory);
        pathMainDirectory = strcat(path_tiff_stack , mainDirectory, '/');        
        
        
        nameData = [sprintf('%s%s%s',pathMainDirectory,'tracksFinal_', param.stem_name),  param.extra, '.mat'];
        if exist(nameData,'file') == 2
            filename = ['tracksFinal_', param.stem_name,  param.extra, '.mat'];
            load(fullfile(pathMainDirectory, filename));
            clear filename
        else
            [givenfile, p] = uigetfile([path_tiff_stack],'Please choose mat file containing tracksFinal data');
            load(fullfile(p, givenfile));
            clear p givenfile
        end
        clear nameData
        
        %% generate dataTracks file from utrack file, named tracksFinal
        
        [ dataTracks_rotated] = get_data_tracks( tracksFinal );
        clear tracksFinal
        % remove dataTracks file to no make confusion with the next file saved.
        nameData = [sprintf('%s%s%s',pathMainDirectory,'dataTracks-', param.sp1),  param.extra, '.mat'];
        delete(nameData);
        % check_tracking_and_orientation(dataTracks_rotated);
        
        
        %% saving the structure that will be downloaded by the DiLiPop analysis scripts

        % transform to single to get dataTracks structure not too heavy
        dataTracks_rotated.entireEmbryo.tracksX = single( dataTracks_rotated.entireEmbryo.tracksX) ;
        dataTracks_rotated.entireEmbryo.tracksY = single( dataTracks_rotated.entireEmbryo.tracksY);
        dataTracks_rotated.entireEmbryo.indexXEnd = single( dataTracks_rotated.entireEmbryo.indexXEnd);
        dataTracks_rotated.entireEmbryo.indexXStart = single( dataTracks_rotated.entireEmbryo.indexXStart);
        dataTracks_rotated.entireEmbryo.lengthTracks = single( dataTracks_rotated.entireEmbryo.lengthTracks);
        
        w = whos('dataTracks_rotated');
        if w.bytes < 2e+9
            filename = strcat('dataTracks_rotated-', short_name,  param.extra, '.mat');
            save(fullfile(pathMainDirectory,filename), 'dataTracks_rotated');
            clear dataTracks_rotated
        else
            dataTracks_rotated_part1.entireEmbryo.tracksX = single( dataTracks_rotated.entireEmbryo.tracksX) ;
            dataTracks_rotated_part1.entireEmbryo.indexXStart = single( dataTracks_rotated.entireEmbryo.indexXStart);
            dataTracks_rotated_part1.entireEmbryo.lengthTracks = single( dataTracks_rotated.entireEmbryo.lengthTracks);
            filename = strcat('dataTracks_rotated_part1-', short_name,  param.extra, '.mat');
            save(fullfile(pathMainDirectory,filename), 'dataTracks_rotated_part1');
            clear dataTracks_rotated_part1
            dataTracks_rotated_part2.entireEmbryo.tracksY = single( dataTracks_rotated.entireEmbryo.tracksY) ;
            dataTracks_rotated_part2.entireEmbryo.indexXEnd = single( dataTracks_rotated.entireEmbryo.indexXEnd);
            dataTracks_rotated_part2.entireEmbryo.numTracks = single( dataTracks_rotated.entireEmbryo.numTracks);
            dataTracks_rotated_part2.numTimePoints = dataTracks_rotated.numTimePoints;
            filename = strcat('dataTracks_rotated_part2-', short_name,  param.extra, '.mat');
            save(fullfile(pathMainDirectory,filename), 'dataTracks_rotated_part2');
            clear dataTracks_rotated_part2
        end       
        
        
    end
end

clear all
close all

end

